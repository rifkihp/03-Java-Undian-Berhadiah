package undian;

import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import socket.socketOperator;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import libs.ExtensionFileFilter;
import libs.ReadExcel;
import libs.buttonMakeOver;
import libs.crypto;
import org.json.JSONArray;
import org.json.JSONObject;
import windowUtilities.WindowUtilities;

/**
 *
 * @author Kiezie
 */
public class operator extends JFrame {

    public String session = UUID.randomUUID().toString();
    public String kategori = "";
    public String hadiah = "";
    public String file_logo = "";
    public String nama_event = "";
    public int time_stop = 5;
    public int no_dari = 1;
    public int no_sampai = 999;
    
    private BufferedImage image;
    private Image scaledImage;
    private ArrayList<String> no_undian;
    
    class pemenang {
        String no_undian;
        String kategori;
        String hadiah;
        String urutan_ke;
        
        pemenang(String no_undian, String kategori, String hadiah, String urutan_ke) {
            this.no_undian = no_undian;
            this.kategori = kategori;
            this.hadiah = hadiah;
            this.urutan_ke = urutan_ke;
        }
         
        String getNo_undian() {
            return this.no_undian;
        }
        
        String getKategori() {
            return this.kategori;
        }
        
        String getHadiah() {
            return this.hadiah;
        }
        
        
        String getUrutan_ke() {
            return this.urutan_ke;
        }
    }
    
    private ArrayList<pemenang> listpemenang = new ArrayList<pemenang>();

    /** Creates new form operator */
    public operator() {
        new socketOperator(9876, this);
    }

    public void showOperator() {
        initComponents();
        listOfHadiah();
        listOfKategori();
        listOfPemenang();
        loadDataPemenang();
        
        listOfUndangan();
        loadDataUndangan();
        
        jSpnNoOfRandom.addItem("1");
        jSpnNoOfRandom.addItem("3");
        jSpnNoOfRandom.addItem("5");
        jSpnNoOfRandom.addItem("10");
        jSpnNoOfRandom.addItem("15");
        jSpnNoOfRandom.addItem("30");
        jSpnNoOfRandom.addItem("60");
        jSpnNoOfRandom.addItem("120");
        
        
        readSettingFile();
        
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width  - getSize().width) / 2, (Toolkit.getDefaultToolkit().getScreenSize().height - getSize().height) / 2);
        setVisible(true);        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel60 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_nama_event = new javax.swing.JTextArea();
        jLabel59 = new javax.swing.JLabel();
        lbl_logo = new javax.swing.JLabel();
        btn_browse = new javax.swing.JButton();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jCmbHadiah = new javax.swing.JComboBox();
        btn_browse1 = new javax.swing.JButton();
        jLabel63 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jCmbKategori = new javax.swing.JComboBox();
        jLabel64 = new javax.swing.JLabel();
        jSpnNoOfRandom = new javax.swing.JComboBox();
        jLabel65 = new javax.swing.JLabel();
        txt_no_dari = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        txt_no_sampai = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_entry = new buttonMakeOver();
        jLabel2 = new javax.swing.JLabel();
        btn_start = new buttonMakeOver();
        jLabel56 = new javax.swing.JLabel();
        btn_finish = new buttonMakeOver();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OPERATOR");

        jTable2.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "No. Undian", "Kategori", "Hadian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel60.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel60.setText("Pemenang:");

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel67.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel67.setText("No. Undian:");

        jTable1.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Undian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        txt_nama_event.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_nama_event.setLineWrap(true);
        txt_nama_event.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nama_eventKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txt_nama_event);

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel59.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel59.setText("Hadiah:");

        btn_browse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_browse.setText("Browse...");
        btn_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browseActionPerformed(evt);
            }
        });

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel62.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel62.setText("Logo File:");

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCmbHadiah.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCmbHadiah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbHadiahActionPerformed(evt);
            }
        });
        jCmbHadiah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCmbHadiahKeyTyped(evt);
            }
        });
        jPanel11.add(jCmbHadiah, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 151, 30));

        btn_browse1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_browse1.setText("+");
        btn_browse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browse1ActionPerformed(evt);
            }
        });
        jPanel11.add(btn_browse1, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, -1, -1, 32));
        btn_browse1.getAccessibleContext().setAccessibleName("Add...");

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel63.setText("Event Title:");

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel70.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel70.setText("Kategori:");

        jCmbKategori.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCmbKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbKategoriActionPerformed(evt);
            }
        });
        jCmbKategori.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCmbKategoriKeyTyped(evt);
            }
        });

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel64.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel64.setText("Lama Pengacakan:");

        jSpnNoOfRandom.setEditable(true);
        jSpnNoOfRandom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jSpnNoOfRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSpnNoOfRandomActionPerformed(evt);
            }
        });
        jSpnNoOfRandom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jSpnNoOfRandomKeyTyped(evt);
            }
        });

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel65.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel65.setText("No. Undian Dari:");

        txt_no_dari.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel66.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel66.setText("No. Undian Sampai:");

        txt_no_sampai.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel59, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel62, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel63, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCmbKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_no_sampai)
                            .addComponent(jSpnNoOfRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_no_dari))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel61, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_logo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_browse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpnNoOfRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_no_dari, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_no_sampai, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jButton1.setText("Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel67, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));

        btn_entry.setIcon(new javax.swing.ImageIcon("images\\ENTRY.png")); // NOI18N
        btn_entry.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_entryActionPerformed(evt);
            }
        });

        btn_start.setIcon(new javax.swing.ImageIcon("images\\START.png")); // NOI18N
        btn_start.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        btn_finish.setIcon(new javax.swing.ImageIcon("images\\FINISH.png")); // NOI18N
        btn_finish.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_finishActionPerformed(evt);
            }
        });

        jLabel58.setEnabled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_entry, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel56, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_finish, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel57, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(198, 198, 198)
                .addComponent(jLabel58, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_entry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel56, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_start, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_finish, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel57, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btn_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser;
        //String choosertitle = null;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                //System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
                //System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
                file_logo = chooser.getSelectedFile().toString();
                image = ImageIO.read(new File(file_logo));
                scaledImage = image.getScaledInstance(lbl_logo.getWidth(), lbl_logo.getHeight(), Image.SCALE_SMOOTH);
                lbl_logo.setIcon(new ImageIcon(scaledImage));
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //showOnScreen(0, chooser);

    }//GEN-LAST:event_btn_browseActionPerformed

    public void showOnScreen( int screen, JFrame frame ) {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] gs = ge.getScreenDevices();
    if( screen > -1 && screen < gs.length )
    {
        gs[screen].setFullScreenWindow( frame );
    }
    else if( gs.length > 0 )
    {
        gs[0].setFullScreenWindow( frame );
    }
    else
    {
        throw new RuntimeException( "No Screens Found" );
    }
}

    private void btn_browse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browse1ActionPerformed
        // TODO add your handling code here:
        String hadiah = JOptionPane.showInputDialog(this, "Hadiah: ", "", 1);
        if(hadiah != null) {
            try {
                insertStringInFile(new File("hadiah.dat"), 1, hadiah);
                listOfHadiah();
                jCmbHadiah.setSelectedItem(hadiah);
            } catch (Exception ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btn_browse1ActionPerformed

    private void btn_entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_entryActionPerformed
        // TODO add your handling code here:
        writeSettingFile();
        readSettingFile();
        session=UUID.randomUUID().toString();
    }//GEN-LAST:event_btn_entryActionPerformed

    private void jCmbHadiahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbHadiahActionPerformed
        // TODO add your handling code here:    
    }//GEN-LAST:event_jCmbHadiahActionPerformed

    private void jCmbHadiahKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbHadiahKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbHadiahKeyTyped

    private void txt_nama_eventKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nama_eventKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nama_eventKeyTyped

    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        // TODO add your handling code here:
        
        JOptionPane pane = new JOptionPane("Yakin ingin hapus data pemenang?");
        Object[] options = new String[] { "Ya", "Tidak" };
        pane.setOptions(options);
        JDialog dialog = pane.createDialog(new JFrame(), "Reset Data");
        dialog.show();
        Object obj = pane.getValue(); 
        int result = -1;
        for (int k = 0; k < options.length; k++)
          if (options[k].equals(obj)) result = k;

        if(result==0) {
            listpemenang = new ArrayList<pemenang>();
            clearDataPemenang();
            loadDataPemenang();                    
            session=UUID.randomUUID().toString();
        }               
    }//GEN-LAST:event_btn_startActionPerformed

    private void btn_finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_finishActionPerformed
        // TODO add your handling code here:
        
                JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Simpan");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter1 = new ExtensionFileFilter("csv only", new String[] { "csv" });
        chooser.setFileFilter(filter1);
        chooser.setAcceptAllFileFilterUsed(false);

        int userSelection = chooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = chooser.getSelectedFile();
            String filePath = fileToSave.getPath();

            if(!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }

            if(fileToSave.exists()) {
                int result = JOptionPane.showConfirmDialog(this, fileToSave.getAbsolutePath()+" sudah ada. Yakin ingin diganti?", "Konfirmasi", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if(result==0) {
                    fileToSave.delete();
                    new prosesSimpanToCsv(fileToSave).execute();
                }
            } else
                new prosesSimpanToCsv(fileToSave).execute();
        }
        requestFocusInWindow();
    }//GEN-LAST:event_btn_finishActionPerformed

    
    class prosesSimpanToCsv extends SwingWorker<Boolean, Void> {
        File fileToSave;

        public prosesSimpanToCsv(File fileToSave) {
            this.fileToSave = fileToSave;
        }

        @Override
        protected Boolean doInBackground() throws Exception {
            String filepath = fileToSave.getAbsolutePath().replace("\\", "/");

            String result = "No. Undian,Kategori,Hadiah";
            
            for(int i=0; i<listpemenang.size(); i++) {
                result += "\n" +
                    listpemenang.get(i).getNo_undian()+","+
                    listpemenang.get(i).getKategori()+","+
                    listpemenang.get(i).getHadiah();
            }

            File filed = new File(filepath);
            BufferedWriter writer = null;
            try {
                writer = new BufferedWriter(new FileWriter(filed));
                writer.write(result);
            } catch(IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(operator.this, "Tidak bisa menyimpan berkas.", "Gagal", JOptionPane.ERROR_MESSAGE);
            } finally {
                if (writer != null) try {
                    writer.close();
                    JOptionPane.showMessageDialog(operator.this, "Simpan log berhasil.", "Simpan Log", JOptionPane.INFORMATION_MESSAGE);
                    //Process p =  Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + filepath);
                    Desktop dt = Desktop.getDesktop();
                    dt.open(new File(filepath));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(operator.this, "Tidak bisa menyimpan berkas.", "Gagal", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            }


            return true;
        }
    }
    
    private void jCmbKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbKategoriActionPerformed

    private void jCmbKategoriKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbKategoriKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbKategoriKeyTyped

    private void jSpnNoOfRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSpnNoOfRandomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpnNoOfRandomActionPerformed

    private void jSpnNoOfRandomKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSpnNoOfRandomKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpnNoOfRandomKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Buka");
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter1 = new ExtensionFileFilter("xls only", new String[] { "xls" });
        chooser.setFileFilter(filter1);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(operator.this) == JFileChooser.APPROVE_OPTION) {
            try {
                String sourcePath = chooser.getSelectedFile().toString();
                ReadExcel test = new ReadExcel();
                test.setInputFile(sourcePath);
                System.out.println(sourcePath);
                
                no_undian = new ArrayList<String>();
                no_undian = test.read();
                insertUndangan(no_undian);
                loadDataUndangan();
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public void insertStringInFile
         (File inFile, int lineno, String lineToBeInserted)
       throws Exception {
     // temp file
     File outFile = new File("$$$$$$$$.tmp");

     // input
     FileInputStream fis  = new FileInputStream(inFile);
     BufferedReader in = new BufferedReader
         (new InputStreamReader(fis));

     // output
     FileOutputStream fos = new FileOutputStream(outFile);
     PrintWriter out = new PrintWriter(fos);

     String thisLine = "";
     int i =1;
     while ((thisLine = in.readLine()) != null) {
       if(i == lineno) out.println(lineToBeInserted);
       out.println(thisLine);
       i++;
       }
    out.flush();
    out.close();
    in.close();

    inFile.delete();
    outFile.renameTo(inFile);
    }
         
         
    public void clearDataPemenang() {
     
        try {
            
            // output
            File outFile = new File("pemenang.dat");

            FileOutputStream fos = new FileOutputStream(outFile);
            PrintWriter out = new PrintWriter(fos);
 
            out.flush();
            out.close();
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }     
         
    public String getJsonDataFormat(boolean saved_pemenang) {
        String result = "{";
        result+="session: \""+session+"\", ";
        result+="hadiah: \""+hadiah+"\", ";
        result+="kategori: \""+kategori+"\", ";
        result+="nama_event: \""+nama_event+"\", ";
        result+="time_stop: \""+time_stop+"\", ";
        result+="no_dari: \""+no_dari+"\", ";
        result+="no_sampai: \""+no_sampai+"\", ";
        result+="saved_pemenang: "+(saved_pemenang?"true":"false")+", ";
        result+="undangan: ["+getListUndangan()+"], ";
        result+="pemenang: ["+getListPemenang()+"]";
        result+="}";
        
        return result;
    }

    private String getListUndangan() {
        String result = "";
        for(int i=0; i<no_undian.size(); i++) {
            result+=(i>0?", ":"")+"{no_undian: \""+no_undian.get(i)+"\"}";
        }
        
        return result;
    }
    
    private String getListPemenang() {
        String result = "";
        for(int i=0; i<listpemenang.size(); i++) {
            pemenang data = listpemenang.get(i);
            result+=(i>0?", ":"")+"{no_undian: \""+data.getNo_undian()+"\", kategori: \""+data.getKategori()+"\", hadiah: \""+data.getHadiah()+"\", urutan_ke: \""+data.getUrutan_ke()+"\"}";
        }
        
        return result;
    }
    
    public void insertPemenang(JSONArray data) {
    
        try {
            // temp file
            File outFile = new File("$$$$$$$$.tmp");
            File inFile = new File("pemenang.dat");

            // input
            FileInputStream fis  = new FileInputStream(inFile);
            BufferedReader in = new BufferedReader(new InputStreamReader(fis));

            // output
            FileOutputStream fos = new FileOutputStream(outFile);
            PrintWriter out = new PrintWriter(fos);

            String thisLine = "";
            while ((thisLine = in.readLine()) != null) {
                out.println(thisLine);
            }
            for(int i=0; i<data.length(); i++) {
                JSONObject rec = data.getJSONObject(i);
                out.println(rec.getString("no_undian")+"|"+rec.getString("kategori")+"|"+rec.getString("hadiah")+"|"+rec.getString("urutan_ke"));
            }
            out.flush();
            out.close();
            in.close();

            inFile.delete();
            outFile.renameTo(inFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void insertUndangan(ArrayList<String> data) {
    
        try {
            // temp file
            File outFile = new File("$$$$$$$$.tmp");
            File inFile = new File("undangan.dat");

            // input
            FileInputStream fis  = new FileInputStream(inFile);
            BufferedReader in = new BufferedReader(new InputStreamReader(fis));

            // output
            FileOutputStream fos = new FileOutputStream(outFile);
            PrintWriter out = new PrintWriter(fos);

            for(int i=0; i<data.size(); i++) {
                out.println(data.get(i));
            }
            out.flush();
            out.close();
            in.close();

            inFile.delete();
            outFile.renameTo(inFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String cpuId = getMotherboardSN();
                String sn = getSerialNumber("C");
                String test = (cpuId+sn).toUpperCase().substring((cpuId+sn).length()-6, (cpuId+sn).length());
                String result = getAktivasiFile();

                WindowUtilities.setNativeLookAndFeel();
                prosesAktivasi(test, result);
                new operator();
            }
        });
    }

    

    private void readSettingFile() {
        Properties prop = new Properties();
	InputStream input = null;
	try {
            input = new FileInputStream("setting.properties");
            prop.load(input);

            kategori = prop.getProperty("kategori").toString();
            hadiah = prop.getProperty("hadiah").toString();
            file_logo = prop.getProperty("logo").toString();
            nama_event = prop.getProperty("nama_event").toString();
            time_stop = Integer.valueOf(prop.getProperty("time_stop").toString());
            no_dari = Integer.valueOf(prop.getProperty("no_dari").toString());
            no_sampai = Integer.valueOf(prop.getProperty("no_sampai").toString());
            
            jCmbKategori.setSelectedItem(kategori);
            jCmbHadiah.setSelectedItem(hadiah);
            txt_nama_event.setText(nama_event);
            jSpnNoOfRandom.setSelectedItem(time_stop);
            txt_no_dari.setText(no_dari+"");
            txt_no_sampai.setText(no_sampai+"");
            
            image = ImageIO.read(new File(file_logo));
            scaledImage = image.getScaledInstance(lbl_logo.getWidth(),lbl_logo.getHeight(),Image.SCALE_SMOOTH);
            lbl_logo.setIcon(new ImageIcon(scaledImage));            
           
	} catch (IOException ex) {
            ex.printStackTrace();
	} finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
	}
    }
    
    private boolean writeSettingFile() {

        Properties prop = new Properties();
	OutputStream output = null;

	try {
            output = new FileOutputStream("setting.properties");

            // set the properties value
            prop.setProperty("kategori", jCmbKategori.getSelectedItem().toString());
            prop.setProperty("hadiah", jCmbHadiah.getSelectedItem().toString());
            prop.setProperty("logo", file_logo);
            prop.setProperty("nama_event", txt_nama_event.getText().toString());
            prop.setProperty("time_stop", jSpnNoOfRandom.getSelectedItem().toString());
            prop.setProperty("no_dari", txt_no_dari.getText().toString());
            prop.setProperty("no_sampai", txt_no_sampai.getText().toString());
            
            // save properties to project root folder
            prop.store(output, null);


	} catch (IOException io) {
            io.printStackTrace();
	} finally {
            if (output != null) {
                try {
                    output.close();
                    return true;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
	}

        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_browse;
    private javax.swing.JButton btn_browse1;
    private javax.swing.JButton btn_entry;
    private javax.swing.JButton btn_finish;
    private javax.swing.JButton btn_start;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCmbHadiah;
    private javax.swing.JComboBox jCmbKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox jSpnNoOfRandom;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lbl_logo;
    private javax.swing.JTextArea txt_nama_event;
    private javax.swing.JTextField txt_no_dari;
    private javax.swing.JTextField txt_no_sampai;
    // End of variables declaration//GEN-END:variables

    private void listOfHadiah() {
        jCmbHadiah.removeAllItems();
        String filePath = "hadiah.dat";
        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader(filePath));
            List<String> strings = new ArrayList<String>();
            try {
                String line = null;
                while ((line = input.readLine()) != null) {
                    jCmbHadiah.addItem(line);
                    strings.add(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    input.close();
                } catch (IOException ex) {
                    Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void listOfKategori() {
        jCmbKategori.removeAllItems();
        String filePath = "kategori.dat";
        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader(filePath));
            List<String> strings = new ArrayList<String>();
            try {
                String line = null;
                while ((line = input.readLine()) != null) {
                    jCmbKategori.addItem(line);
                    strings.add(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    input.close();
                } catch (IOException ex) {
                    Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void listOfPemenang() {
        listpemenang = new ArrayList<pemenang>();
        String filePath = "pemenang.dat";
        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader(filePath));
            try {
                String line = null;
                while ((line = input.readLine()) != null) {
                    //System.out.println(line);
                    String[] temps = line.split("\\|", -1);
                    pemenang data = new pemenang(temps[0], temps[1], temps[2], temps[3]);
                    listpemenang.add(data);
                }
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    input.close();
                } catch (IOException ex) {
                    Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void prosesAktivasi(String test, String result) {

        if(result.equalsIgnoreCase("") || !test.equalsIgnoreCase(new crypto().decrypt(result))) {
            System.out.println("Nomer Aktivasi tidak valid!");
            Object[] options = {"Aktivasi", "Keluar"};
            int n = JOptionPane.showOptionDialog(null,
                "Nomer Aktivasi tidak valid!.",
                "Error",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.ERROR_MESSAGE,
                null,     //do not use a custom Icon
                options,  //the titles of buttons
                options[0]); //default button title

            if(n==0) {
                result = JOptionPane.showInputDialog(null, "No. Seri:  "+test+"\nNo. Aktivasi: ", "");
                if(result != null) {
                    prosesAktivasi(test, result);
                    writeAktivasiFile(new crypto().encrypt(test));
                } else {
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
        }
    }


    public static String getMotherboardSN() {
  String result = "";
    try {
      File file = File.createTempFile("realhowto",".vbs");
      file.deleteOnExit();
      FileWriter fw = new java.io.FileWriter(file);

      String vbs =
         "Set objWMIService = GetObject(\"winmgmts:\\\\.\\root\\cimv2\")\n"
        + "Set colItems = objWMIService.ExecQuery _ \n"
        + "   (\"Select * from Win32_BaseBoard\") \n"
        + "For Each objItem in colItems \n"
        + "    Wscript.Echo objItem.SerialNumber \n"
        + "    exit for  ' do the first cpu only! \n"
        + "Next \n";

      fw.write(vbs);
      fw.close();
      Process p = Runtime.getRuntime().exec("cscript //NoLogo " + file.getPath());
      BufferedReader input =
        new BufferedReader
          (new InputStreamReader(p.getInputStream()));
      String line;
      while ((line = input.readLine()) != null) {
         result += line;
      }
      input.close();
    }
    catch(Exception e){
        e.printStackTrace();
    }
    return result.trim();
  }

    public static String getSerialNumber(String drive) {
  String result = "";
    try {
      File file = File.createTempFile("realhowto",".vbs");
      file.deleteOnExit();
      FileWriter fw = new java.io.FileWriter(file);

      String vbs = "Set objFSO = CreateObject(\"Scripting.FileSystemObject\")\n"
                  +"Set colDrives = objFSO.Drives\n"
                  +"Set objDrive = colDrives.item(\"" + drive + "\")\n"
                  +"Wscript.Echo objDrive.SerialNumber";  // see note
      fw.write(vbs);
      fw.close();
      Process p = Runtime.getRuntime().exec("cscript //NoLogo " + file.getPath());
      BufferedReader input =
        new BufferedReader
          (new InputStreamReader(p.getInputStream()));
      String line;
      while ((line = input.readLine()) != null) {
         result += line;
      }
      input.close();
    }
    catch(Exception e){
        e.printStackTrace();
    }
    return result.trim();
  }


    public static String getAktivasiFile() {
        String result = "";
        Properties prop = new Properties();
	InputStream input = null;
	try {
            input = new FileInputStream("aktivasi.src");
            prop.load(input);

            result = prop.getProperty("noaktivasi");
	} catch (IOException ex) {
            ex.printStackTrace();
	} finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
	}

        return result;
    }

    public static void writeAktivasiFile(String aktivasi) {
        Properties prop = new Properties();
	OutputStream output = null;

	try {
            output = new FileOutputStream("aktivasi.src");

            // set the properties value
            prop.setProperty("noaktivasi", aktivasi);

            // save properties to project root folder
            prop.store(output, null);


	} catch (IOException io) {
            io.printStackTrace();
	} finally {
            if (output != null) {
                try {
                    output.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
	}
    }
    
    public void loadDataPemenang() {
        while (jTable2.getRowCount() > 0) {
            ((DefaultTableModel) jTable2.getModel()).removeRow(0);
        }
        
        for(int row=0; row<listpemenang.size(); row++) {
            Object[] values = new Object[5];
            values[0] = row+1;
            values[1] = listpemenang.get(row).getNo_undian();
            values[2] = listpemenang.get(row).getKategori();
            values[3] = listpemenang.get(row).getHadiah();
            ((DefaultTableModel) jTable2.getModel()).insertRow(row, values);
        }
    }
    
    public void listOfUndangan() {
        no_undian = new ArrayList<String>();
        String filePath = "undangan.dat";
        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader(filePath));
            try {
                String line = null;
                while ((line = input.readLine()) != null) {
                    no_undian.add(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    input.close();
                } catch (IOException ex) {
                    Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(operator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void loadDataUndangan() {
        while (jTable1.getRowCount() > 0) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(0);
        }
        
        for(int row=0; row<no_undian.size(); row++) {
            Object[] values = new Object[1];
            values[0] = no_undian.get(row);
            ((DefaultTableModel) jTable1.getModel()).insertRow(row, values);
        }
    }
}
